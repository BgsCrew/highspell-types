/// <reference types="@babylonjs/core" />

/**
 * This file is auto-generated by the reverse-engineering script.
 * Do not edit it manually.
 */

declare module "game" {
    export import BABYLON = BABYLON;

    namespace Managers {

        /**
         * Originally: jM
         */
        export class UnknownManager_jM {
            static readonly Instance: UnknownManager_jM;


        }

        /**
         * Originally: SR
         */
        export class ObjectUrlManager {
            static readonly Instance: ObjectUrlManager;

            createObjectURL(e: any): any;
            revokeObjectURL(e: any): void;
        }

        /**
         * Originally: zR
         */
        export class FogManager {
            static readonly Instance: FogManager;

            initialize(): void;
            updatedDrawDistance(e: any, t: any): void;
            updateIsFogEnabled(e: any): void;
            enterMapLevel(e: any, t: any): void;
            loadAfterLogin(e: any, t: any, i: any): void;
            unloadAfterLogout(): any;
            currentHourChanged(e: any): void;
            update(e: any): void;
            draw(e: any): void;
            reset(): void;
        }

        /**
         * Originally: aD
         */
        export class WorldEntityManger {
            static readonly Instance: WorldEntityManger;

            init(): void;
            handleMainPlayerMovedUnderOrOutFromRoof(e: any, t: any): void;
            checkIfPointIsUnderRoof(e: any): any;
            checkIfPositionIsUnderRoof(e: any): any;
            checkIfCoordinatesAreUnderRoof(e: any, t: any, i: any): any;
            getWorldEntityById(e: any): any;
            getWallById(e: any): any;
            getBridgeById(e: any): any;
            getRoofById(e: any): any;
            hasWorldEntity(e: any): any;
            hasWall(e: any): any;
            hasBridge(e: any): any;
            hasRoof(e: any): any;
            addWorldEntity(e: any): any;
            addWall(e: any): any;
            addBridge(e: any): any;
            addRoof(e: any): any;
            removeWorldEntityById(e: any): any;
            removeWallById(e: any): any;
            removeBridgeById(e: any): any;
            removeRoofById(e: any): any;
            addPlanet(e: any): void;
            getPlanetByEntityId(e: any): any;
            removePlanetByEntityId(e: any): any;
            removeEntitiesOutsideOfBorder(e: any, t: any, i: any, n: any): any;
            setEntitiesExhaustedResources(e: any, t: any, i: any): void;
            setEntityReplenishedResources(e: any): void;
            markEntityAsLooted(e: any, t: any): void;
            isTargetForSmelting(e: any): any;
            handleWalkThroughDoor(e: any, t: any): void;
            clearWorldEntities(): void;
            clearPlanets(): void;
            updateEntities(e: any): void;
            drawEntities(e: any, t: any, i: any): void;
            reset(): void;
        }

        /**
         * Originally: CN
         */
        export class GroundItemManager {
            static readonly Instance: GroundItemManager;

            removeItemsOutsideOfBorder(e: any, t: any, i: any, n: any): any;
            clearGroundItems(e?: any): void;
            addGroundItem(e: any): void;
            getGroundItemByEntityId(e: any): any;
            removeItemByEntityId(e: any): void;
            drawEntities(e: any, t: any, i: any): void;
            reset(): void;
        }

        /**
         * Originally: hF
         */
        export class CacheManager {
            static readonly Instance: CacheManager;

            initialize(e: any): void;
            showClearGameCachePopupMenu(e: any): any;
            addClearGameCacheButtonToScreen(): void;
            removeClearGameCacheButtonFromScreen(): void;
        }

        /**
         * Originally: vF
         */
        export class MeshManager {
            static readonly Instance: MeshManager;

            getInstanceCountForMeshByFileName(e: any): any;
            getObjectByName(e: any, t: any, i: any): any;
            removeMeshes(e: any): void;
            disposeUnusedMeshes(): void;
            garbageCollectOldProjectileMeshes(e: any, t?: any): void;
            getArrowMesh(e: any, t: any): any;
            getMagicSphere(e: any, t: any, i: any, n: any, r: any, s: any, a?: any): any;
            getMagicCube(e: any, t: any, i: any, n: any, r: any, s: any, a?: any): any;
            getMagicTorus(e: any, t: any, i: any, n: any, r: any, s: any, a?: any): any;
            createBillboardMesh(e: any, t: any, i: any, n: any, r: any, s: any): any;
            createSpritesheetMaterial(e: any, t: any): any;
            showDebugGridMeshes(): any;
            clearDebugGridMeshes(): void;
            reset(): void;
        }

        /**
         * Originally: IF
         */
        export class WorldManager {
            static readonly Instance: WorldManager;

            InitNumberChunksPerAxis(): void;
            getPathfinderGraphStartPoint(): LI;
            getPathfinderGraphEndPoint(e: any, t: any): LI;
            getInformationForCurrentMapLevel(): any;
            loadAsync(e: any, t: any, i: any): any;
            loadAfterLogin(e: any, t: any, i: any): void;
            unloadAfterLogout(): void;
            enterMapLevel(e: any, t: any): void;
            currentHourChanged(e: any): void;
            update(e: any): void;
            draw(e: any): void;
            getTileAtGameCoordinates(e: any, t: any): null;
            getGroundHeightAtPoint(e: any, t: any, i: any): any;
            getGroundHeightAtEntity(e: any): any;
            getHeightAtTopOfEntity(e: any): any;
            getGroundHeightAtCamera(e: any): any;
            isPointInNewChunk(e: any): any;
            checkIfNeedToLoadNewMapSections(e: any, t: any): any;
            removeDistantEntitiesAfterEnteringNewChunk(e: any, t: any): void;
            loadTreasureMapImage(e: any, t: any, i: any): any;
            toggleRedPathMesh(e: any): void;
            reset(): void;
        }

        /**
         * Originally: hk
         */
        export class BitmapManager {
            static readonly Instance: BitmapManager;

            createBitmapFromURL(e: any): any;
        }

        /**
         * Originally: Ck
         */
        export class AppearanceManager {
            static readonly Instance: AppearanceManager;

            preInitialize(): any;
            initializeNewSession(): void;
            updatePlayerAppearance(e: any, t: any): any;
            registerEventHandlersForEntity(e: any): void;
            unregisterEventHandlersForEntity(e: any): void;
            loadHumanSpritesheet(e: any, t: any, i: any, n: any, r: any, s: any): void;
            update(e: any): void;
            draw(e: any, t: any, i: any): void;
            reset(): void;
        }

        /**
         * Originally: Dk
         */
        export class EntityFactory {
            static readonly Instance: EntityFactory;

            createMainPlayerFromPacketData(e: any): null;
            initializeMainPlayerAppearance(e: any, t: any, i: any): void;
            createOtherPlayerFromPacketData(e: any): null;
            createNPCFromPacketData(e: any): any;
            createWorldEntity(e: any): any;
            createBridge(e: any): any;
            createGroundItemFromPacketData(e: any): any;
            destroyPlayer(e: any): void;
            destroyNPC(e: any): void;
            destroyWorldEntity(e: any): void;
            destroyGroundItemEntity(e: any): void;
        }

        /**
         * Originally: Lk
         */
        export class EntityManager {
            static readonly Instance: EntityManager;

            loadAsync(e: any, t: any): any;
            init(): void;
            addMainPlayer(e: any): null;
            addOtherPlayer(e: any): void;
            getPlayerByEntityId(e: any): any;
            getPlayerByName(e: any): any;
            removePlayerByEntityId(e: any): any;
            clearOtherPlayers(e?: any): void;
            addNPC(e: any): void;
            getNPCByEntityId(e: any): any;
            isAnyEntityWithEntityTypeIDOnScreen(e: any): any;
            removeNPCByEntityId(e: any): any;
            clearNPCs(e?: any): void;
            teleportEntity(e: any, t: any, i: any, n: any, r: any, s: any): void;
            removeEntitiesOutsideOfBorder(e: any, t: any, i: any, n: any): any;
            movePlayer(e: any, t: any, i: any): void;
            moveNPC(e: any, t: any, i: any): void;
            handleMainPlayerMovedInWilderness(e: any, t: any): void;
            restoreStatsByOne(e: any): void;
            restoreHitpointsForEntity(e: any, t: any): void;
            updateEntities(e: any): void;
            drawEntities(e: any, t: any, i: any): void;
            reset(): void;
        }

        /**
         * Originally: Xk
         */
        export class SpellManager {
            static readonly Instance: SpellManager;

            addArrow(e: any, t: any, i?: any, n?: any): any;
            addSpell(e: any, t: any, i: any, n: any, r?: any): any;
            update(e: any): void;
            draw(e: any, t: any, i: any): void;
            reset(): void;
        }

        /**
         * Originally: yV
         */
        export class PacketFactory {
            static readonly Instance: PacketFactory;

            createGameAction(e: any, t: any): gV;
            createGameStateUpdateAction(e: any): gV;
            createPlayerMoveToAction(e: any, t: any, i: any): any;
            createNPCMoveToAction(e: any, t: any, i: any): any;
            createPlayerEnteredChunkAction(e: any, t: any, i: any, n: any, r: any, s: any, a: any, o: any, l: any, h: any, c: any, u: any, d: any, p: any): any;
            createNPCEnteredChunkAction(e: any, t: any, i: any, n: any, r: any, s: any, a: any, o: any): any;
            createItemEnteredChunkAction(e: any, t: any, i: any, n: any, r: any, s: any, a: any): any;
            createEntityExitedChunkAction(e: any, t: any): any;
            createInGameHourChangedAction(e: any): any;
            createShowDamageAction(e: any, t: any, i: any): any;
            createSendMovementPathAction(e: any, t: any): any;
            createObtainedResourceAction(e: any): any;
            createPublicMessageAction(e: any, t: any, i: any): any;
            createIEnteredChunkAction(e: any, t: any): any;
            createEnteredIdleStateAction(e: any, t: any): any;
            createLoginAction(e: any, t: any, i: any): any;
            createLoginFailedAction(e: any): any;
            createLoggedInAction(e: any, t: any, i: any, n: any, r: any, s: any, a: any, o: any, l: any, h: any, c: any, u: any, d: any, p: any, f: any, _: any, m: any, g: any, v: any, S: any, C: any): any;
            createLogoutAction(e: any): any;
            createLogoutFailedAction(e: any): any;
            createLoggedOutAction(e: any): any;
            createStartedBankingAction(e: any, t: any): any;
            createStoppedBankingAction(e: any): any;
            createReceivedBankitemsAction(e: any): any;
            createTradeRequestedAction(e: any, t: any): any;
            createPlayerAcceptedAction(e: any): any;
            createTradeStatusResetAction(): gV;
            createTradeGoToFinalStepAction(): gV;
            createTradeStartedAction(e: any, t: any): any;
            createTradeCancelledAction(e: any, t: any, i: any): any;
            createTradeCompletedAction(e: any, t: any, i: any): any;
            createUseItemOnEntityAction(e: any, t: any, i: any): any;
            createCreateItemAction(e: any, t: any, i: any): any;
            createCreatedItemAction(e: any, t: any, i: any): any;
            createStartedTargetingAction(e: any, t: any, i: any, n: any): any;
            createStoppedTargetingAction(e: any, t: any): any;
            createStartedSkillingAction(e: any, t: any, i: any, n?: any): any;
            createStoppedSkillingAction(e: any, t: any, i: any): any;
            createEquippedItemAction(e: any, t: any): any;
            createUnequippedItemAction(e: any, t: any): any;
            createPlayerSkillLevelIncreasedAction(e: any, t: any, i: any, n: any): any;
            createPlayerCombatLevelIncreasedAction(e: any, t: any): any;
            createCookedItemAction(e: any): any;
            createOvercookedItemAction(e: any): any;
            createPerformActionOnEntityAction(e: any, t: any, i: any): any;
            createIncreasedCombatExpAction(e: any, t: any): any;
            createChangeCombatStyleAction(e: any, t: any): any;
            createCombatStyleChangedAction(e: any): any;
            createChangeAutoRetaliateAction(e: any): any;
            createAutoRetaliateChangedAction(e: any): any;
            createTeleportToAction(e: any, t: any, i: any, n: any, r: any, s: any, a?: any): any;
            createPlayerDiedAction(e: any, t?: any): any;
            createStartedShoppingAction(e: any, t: any, i: any): any;
            createStoppedShoppingAction(e: any, t: any): any;
            createUpdatedShopStockAction(e: any, t: any): any;
            createStartedChangingAppearanceAction(e: any, t: any): any;
            createStoppedChangingAppearanceAction(e: any): any;
            createChangeAppearanceAction(e: any, t: any, i: any, n: any, r: any): any;
            createChangedAppearanceAction(e: any, t: any, i: any, n: any, r: any, s: any): any;
            createMenuStateKeepAlivePingAction(e: any): any;
            createToggleSprintAction(e: any): any;
            createToggledSprintAction(e: any, t: any, i: any): any;
            createRestoredStatsAction(e: any): any;
            createEntityExhaustedResourcesAction(e: any, t: any, i?: any): any;
            createEntityReplenishedResourcesAction(e: any): any;
            createShookTreeAction(e: any, t: any, i: any): any;
            createGainedExpAction(e: any, t: any): any;
            createShakeTreeResultMessageAction(e?: any, t?: any): any;
            createOpenedSkillingMenuAction(e: any, t: any): any;
            createUseItemOnItemAction(e: any, t: any, i: any, n: any, r: any, s: any, a: any, o: any, l: any): any;
            createUsedItemOnItemAction(e: any, t: any, i: any, n: any, r: any, s: any, a: any, o: any, l: any, h: any): any;
            createWentThroughDoorAction(e: any, t: any): any;
            createCastTeleportSpellAction(e: any): any;
            createCastedTeleportSpellAction(e: any, t: any, i: any): any;
            createCastInventorySpellAction(e: any, t: any, i: any, n: any, r: any): any;
            createCastedInventorySpellAction(e: any, t: any, i: any, n: any): any;
            createCastSingleCombatOrStatusSpellAction(e: any, t: any, i: any): any;
            createCastedSingleCombatOrStatusSpellAction(e: any, t: any, i: any, n: any, r: any, s: any, a: any): any;
            createToggleAutoCastAction(e: any): any;
            createToggledAutoCastAction(e: any): any;
            createSkillCurrentLevelChangedAction(e: any, t: any): any;
            createServerInfoMessageAction(e: any, t: any): any;
            createForcePublicMessageAction(e: any, t: any, i: any): any;
            createQuestProgressedAction(e: any, t: any): any;
            createCreatedUseItemOnItemActionItemsAction(e: any, t: any, i: any): any;
            createPathfindingFailedAction(e: any): any;
            createFiredProjectileAction(e: any, t: any, i: any, n: any, r: any, s: any, a: any): any;
            createServerShutdownCountdownAction(e: any): any;
            createCanLoginAction(): gV;
            createReconnectToServerAction(e: any, t: any): any;
            createEntityStunnedAction(e: any, t: any, i: any): any;
            createGlobalPublicMessageAction(e: any, t: any, i: any): any;
            createHealthRestoredAction(e: any, t: any, i: any): any;
            createPlayerCountChangedAction(e: any): any;
            createForcedSkillCurrentLevelChangedAction(e: any, t: any, i: any): any;
            createReceivedNPCConversationDialogue(e: any, t: any, i: any, n: any, r: any, s: any): any;
            createSelectNPCConversationOption(e: any): any;
            createEndedNPCConversationAction(e: any): any;
            createInvokeInventoryItemActionAction(e: any, t: any, i: any, n: any, r: any, s: any): any;
            createInvokedInventoryItemActionAction(e: any, t: any, i: any, n: any, r: any, s: any, a: any, o: any): any;
            createUsedItemOnEntityAction(e: any, t: any, i: any, n: any, r: any, s: any): any;
            createInsertAtBankStorageSlotAction(e: any, t: any): any;
            createInsertedAtBankStorageSlotAction(e: any): any;
            createRemovedItemAtInventorySlotAction(e: any, t: any, i: any, n: any, r: any, s: any): any;
            createAddedItemAtInventorySlotAction(e: any, t: any, i: any, n: any, r: any, s: any): any;
            createShowLootMenuAction(e: any, t: any): any;
            createReorganizeInventorySlotsAction(e: any, t: any, i: any, n: any, r: any, s: any, a: any, o: any): any;
            createReorganizedInventorySlotsAction(e: any, t: any, i: any, n: any, r: any, s: any, a: any, o: any, l: any): any;
            createSwitchToIdleStateAction(): any;
            createUpdateTradeStatusAction(e: any): any;
            createStartedDiggingAction(e: any): any;
            createStoppedDiggingAction(e: any): any;
            createPlayerInfoAction(e: any): any;
            createCaptchaActionAction(e: any, t: any): any;
            createOpenedCaptchaScreenAction(e: any): any;
            createReceivedCaptchaAction(e: any, t: any, i: any): any;
            createCaptchaActionResultAction(e: any): any;
            createMentalClarityChangedAction(e: any, t: any, i: any): any;
        }

        /**
         * Originally: AV
         */
        export class PlayerStatsManager {
            static readonly Instance: PlayerStatsManager;

            loadAsync(e: any, t: any): any;
            hasRequiredCurrentLevel(e: any, t: any): any;
            increaseExp(e: any, t: any): any;
            changeStatsAfterConsumingItem(e: any): void;
            forcefullyChangeCurrentLevel(e: any, t: any, i: any): void;
            reset(): void;
        }

        /**
         * Originally: qV
         */
        export class InventoryManager {
            static readonly Instance: InventoryManager;

            loadAsync(e: any, t: any, i: any): any;
            invokeInventoryAction(e: any, t: any, i: any, n: any): any;
            emitCreateItemActionPacket(e: any, t: any, i: any): void;
            emitUseItemOnItemActionPacket(e: any, t: any, i: any, n: any, r: any, s: any, a: any): void;
            emitInventoryItemActionPacket(e: any, t: any, i: any, n: any, r: any, s: any): void;
            emitReorganizeInventorySlotsPacket(e: any, t: any, i: any, n: any, r: any, s: any, a: any, o: any): void;
            selectItem(e: any, t: any, i: any): any;
            unselectItem(): any;
            useItemOnEntity(e: any, t: any): void;
            handleLookedAtItem(e: any, t: any): void;
            reset(): void;
        }

        /**
         * Originally: lG
         */
        export class QuestManager {
            static readonly Instance: QuestManager;

            loadAsync(e: any): any;
            updateQuestProgress(e: any, t: any): void;
            reset(): void;
        }

        /**
         * Originally: uG
         */
        export class ProjectileManager {
            static readonly Instance: ProjectileManager;

            handleEntityFiredProjectile(e: any, t: any, i: any, n: any, r: any): void;
            reset(): void;
        }

        /**
         * Originally: DG
         */
        export class ChatFilterManager {
            static readonly Instance: ChatFilterManager;

            initialize(): void;
            filterPublicChatMessage(e: any, t: any, i: any, n: any, r: any): void;
            filterPrivateChatMessage(e: any, t: any, i: any, n: any): void;
        }

        /**
         * Originally: FG
         */
        export class NetworkManager {
            static readonly Instance: NetworkManager;

            emitPacket(e: any): void;
            openSocketConnection(e: any, t: any, i: any): void;
        }

        /**
         * Originally: jG
         */
        export class SocialManager {
            static readonly Instance: SocialManager;

            isUserBlocked(e: any): any;
            sendPrivateMessage(e: any, t: any): void;
            addFriend(e: any): void;
            removeFriend(e: any): void;
            blockUser(e: any): void;
            unblockUser(e: any): void;
            openSocketConnection(e: any): any;
            reset(): void;
        }

        /**
         * Originally: dW
         */
        export class SpellActionManager {
            static readonly Instance: SpellActionManager;

            selectSpell(e: any, t: any): void;
            startAutoCastingSpell(e: any): void;
            stopAutoCastingSpell(): void;
            castTeleportSpell(e: any): void;
            castSpellOnItem(e: any, t: any, i: any, n: any, r: any): void;
            castSpellOnEntity(e: any, t: any): void;
            unselectSpell(): any;
            handleEntityCastedTeleportSpell(e: any, t: any, i: any, n?: any): void;
            handleEntityCastedInventorySpell(e: any, t: any, i: any): void;
            handleEntityCastedStatusSpell(e: any, t: any, i: any, n: any): void;
            handleEntityCastedCombatSpell(e: any, t: any, i: any, n: any, r: any): void;
            reset(): void;
        }

        /**
         * Originally: pW
         */
        export class GameLoop {
            static readonly Instance: GameLoop;

            forceEntitiesToRecalculateYPosition(): void;
            startGameLoop(e: any): void;
            stopGameLoop(): void;
            freezeDrawing(): void;
            resumeDrawing(): void;
        }

        /**
         * Originally: fW
         */
        export class InputManager {
            static readonly Instance: InputManager;

            init(): void;
            reset(): void;
        }

        /**
         * Originally: _W
         */
        export class WildernessManager {
            static readonly Instance: WildernessManager;

            loadAfterLogin(e: any): void;
            handleMainPlayerMovedToNewTile(e: any, t: any): void;
            reset(): void;
        }

        /**
         * Originally: gW
         */
        export class GameEngine {
            static readonly Instance: GameEngine;

            initEngine(e: any, t: any, i: any): void;
            initializeGameEngineAsync(e: any, t: any, i: any, n: any, r: any, s: any, a: any, o: any): any;
            startGameEngine(e: any): void;
            stopGameEngine(): any;
            getPickingInfoAtPointer(e: any, t: any): any;
            resizeEngine(e: any): void;
            clientPointToInGamePoint(e: any, t: any): any;
        }

        /**
         * Originally: oq
         */
        export class UIManager {
            static readonly Instance: UIManager;

            isControllerInitialized(): any;
            getController(): any;
            getCurrentPointerX(): any;
            getCurrentPointerY(): any;
            getGameContainer(): any;
            getCanvas(): any;
            getScreenMask(): any;
            getContextMenuItemFactory(): any;
            getHighSpellInventoryItemFactory(): any;
            getChatMenuFactory(): any;
            getCenterMenuFactory(): any;
            getDialogueMenuFactory(): any;
            getEntityOverlayFactory(): any;
            getLoginFactory(): any;
            getCaptchaScreenFactory(): any;
            initializeManager(e: any, t: any, i: any): void;
            initializeControls(e: any): void;
            setUITheme(e: any): void;
            setHasUITransitions(e: any): void;
            setHasUITransparency(e: any): void;
            setHasUIMenuBlur(e: any): void;
            getUseOneMouseButtonMode(): any;
            setUseOneMouseButtonMode(e: any): void;
            setUIZoom(e: any): void;
            updateStyleForMobile(e: any): void;
            setOnUIControlPointerDownEventOccurred(e: any): void;
            setOnUIControlPointerUpEventOccurred(e: any): void;
            showLoadingOverlay(): void;
            hideLoadingOverlay(): void;
            reset(): void;
        }
    }
}
