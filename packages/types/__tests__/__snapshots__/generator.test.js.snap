// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Type Generation should generate types that match the snapshot 1`] = `
"{
  "GameAction.js": "// Auto-generated by generate-types.js\\nexport const GameAction = {\\n    IsUserBlocked: 'isUserBlocked',\\n    SendPrivateMessage: 'sendPrivateMessage',\\n    AddFriend: 'addFriend',\\n    RemoveFriend: 'removeFriend',\\n    BlockUser: 'blockUser',\\n    UnblockUser: 'unblockUser',\\n    OpenSocketConnection: 'openSocketConnection',\\n    Reset: 'reset',\\n};\\n",
  "definitions.d.ts": "export namespace Definitions {\\n    export interface ItemDefinition {\\n        ID: number;\\n        Name: string;\\n        NameCapitalized: string;\\n        Cost: number;\\n        IsStackable: boolean;\\n        IsTradeable: boolean;\\n        IsForMission: boolean;\\n        IsMembers: boolean;\\n    }\\n\\n    export interface NPCDefinition {\\n        ID: number;\\n        Name: string;\\n        NameCapitalized: string;\\n        MoveEagerness: number;\\n        Combat: Combat;\\n        CanShop: boolean;\\n        Appearance: any; // Pk class\\n        CreatureAppearance: any; // bk class\\n    }\\n\\n    export interface Combat {\\n        CombatLevel: number;\\n        CombatStyle: Enums.CombatStyle;\\n        AutoRetaliate: boolean;\\n        MovementSpeed: number;\\n        IsAggressive: boolean;\\n        AggroRadius: number;\\n        IsAlwaysAggro: boolean;\\n        Skills: Skill[]; // array of Skill objects\\n    }\\n\\n    export interface Hitpoints extends Skill {\\n        OnReceivedDamageListener: Listener<(damage: number) => void>; // NI class\\n    }\\n\\n    export interface Skill {\\n        OnExpChangeListener: Listener<(newExp: number) => void>; // NI class\\n        OnCurrentLevelChangeListener: Listener<(newLevel: number) => void>; // NI class\\n        OnLevelChangeListener: Listener<(newLevel: number) => void>; // NI class\\n        Level: number;\\n        CurrentLevel: number;\\n        XP: number;\\n    }\\n\\n    export interface Listener<T extends (...args: any[]) => void> {\\n        Subscribe(callback: T): void;\\n        Unsubscribe(callback: T): void;\\n        Notify(...args: Parameters<T>): void;\\n    }\\n\\n    export interface Bank {\\n        Type: Enums.MenuType;\\n        Items: BankItem[];\\n        IsWaitingForSwapItemConfirmation: boolean;\\n    }\\n\\n    export interface BankItem extends Item {\\n    }\\n\\n    export interface Quest {\\n        Def: QuestDefinition;\\n        CurrentCheckpoint: number;\\n        IsStarted: boolean;\\n        IsCompleted: boolean;\\n    }\\n\\n    export interface QuestDefinition {\\n        ID: number;\\n        Name: string;\\n        Description: string;\\n        Reward: QuestReward;\\n        Checkpoints: QuestCheckpoint[];\\n    }\\n\\n    export interface QuestReward {\\n        Exp: QuestExp[];\\n        ExtraRewardText: string[];\\n    }\\n\\n    export interface QuestExp {\\n        Skill: Enums.Skill;\\n        _minAmount: number;\\n        _maxAmount: number;\\n        _bonusPerLevel: number;\\n    }\\n\\n    export interface QuestCheckpoint {\\n        ID: number;\\n        Hint: string;\\n    }\\n}\\n",
  "enums.d.ts": "export namespace Enums {\\n    export enum EntityType {\\n        Environment = 0,\\n        Item = 1,\\n        NPC = 2,\\n        Player = 3,\\n    }\\n\\n    export enum TargetAction {\\n        attack = 0,\\n        talk_to = 1,\\n        pick_up = 2,\\n        equip = 3,\\n        unequip = 4,\\n        use = 5,\\n        drop = 6,\\n        examine = 7,\\n        bank = 8,\\n        shop = 9,\\n        cook_on = 10,\\n        fish_in = 11,\\n        mine = 12,\\n        chop = 13,\\n        gather_from = 14,\\n        smith_at = 15,\\n        smelt_at = 16,\\n        teleport = 17,\\n        climb_up = 18,\\n        climb_down = 19,\\n        climb_same_map_level = 20,\\n        open = 21,\\n        unlock = 22,\\n        brew = 23,\\n        cast = 24,\\n        auto_cast = 25,\\n        stop_auto_casting = 26,\\n        mine_through = 27,\\n        go_through = 28,\\n        craft = 29,\\n        sleep_in = 30,\\n        touch = 31,\\n        craft_at = 32,\\n        use_item_with = 33,\\n        walk_here = 34,\\n        trade_with = 35,\\n        follow = 36,\\n        inspect = 37,\\n        cancel = 38,\\n        add_entity = 39,\\n        edit_entity = 40,\\n    }\\n\\n    export enum MenuType {\\n        Bank = 0,\\n        Shop = 1,\\n        Inventory = 2,\\n        TradeInventory = 3,\\n        TradeMyOfferedItems = 4,\\n        TradeOtherPlayerOfferedItems = 5,\\n        Loadout = 6,\\n        ChangeAppearance = 7,\\n        Anvil = 8,\\n        Furnace = 9,\\n        CookingRange = 10,\\n        Magic = 11,\\n        PotionMaking = 12,\\n        Welcome = 13,\\n        SmeltingKiln = 14,\\n        CameraSettings = 15,\\n        SkillGuide = 16,\\n        Loot = 17,\\n        FriendList = 18,\\n        Stats = 19,\\n        Quests = 20,\\n        Settings = 21,\\n        TextInput = 22,\\n        Confirmation = 23,\\n        Chat = 24,\\n        PrivateChat = 25,\\n        TradeMenu = 26,\\n        TreasureMap = 27,\\n        GraphicsSettings = 28,\\n        ChatSettings = 29,\\n        CraftingTable = 30,\\n    }\\n\\n    export enum ItemAction {\\n        use = 0,\\n        drop = 1,\\n        examine = 2,\\n        eat = 3,\\n        drink = 4,\\n        equip = 5,\\n        unequip = 6,\\n        withdraw = 7,\\n        withdrawiou = 8,\\n        deposit = 9,\\n        offer = 10,\\n        revoke = 11,\\n        buy = 12,\\n        sell = 13,\\n        open = 14,\\n        check_price = 15,\\n        create = 16,\\n        rub = 17,\\n        dropx = 18,\\n        look_at = 19,\\n        dig = 20,\\n        discard = 21,\\n    }\\n\\n    export enum ReorganizeType {\\n        Swap = 0,\\n        Insert = 1,\\n    }\\n\\n    export enum CombatStyle {\\n        Melee = 0,\\n        Ranged = 1,\\n        Magic = 2,\\n    }\\n\\n    export enum DamageType {\\n        Melee = 0,\\n        Ranged = 1,\\n        Magic = 2,\\n        Poison = 3,\\n        Bleed = 4,\\n    }\\n\\n    export enum CauseOfDeath {\\n        PVP = 0,\\n        PVE = 1,\\n        Environment = 2,\\n    }\\n\\n    export enum Skill {\\n        hitpoints = 0,\\n        accuracy = 1,\\n        strength = 2,\\n        defense = 3,\\n        magic = 4,\\n        fishing = 5,\\n        cooking = 6,\\n        forestry = 7,\\n        mining = 8,\\n        crafting = 9,\\n        crime = 10,\\n        potionmaking = 11,\\n        smithing = 12,\\n        harvesting = 13,\\n        enchanting = 14,\\n        range = 15,\\n    }\\n}\\n",
  "generated.d.ts": "/// <reference types=\\"@babylonjs/core\\" />\\n/// <reference path=\\"packets.d.ts\\" />\\n\\n/**\\n * This file is auto-generated by the reverse-engineering script.\\n * Do not edit it manually.\\n */\\n\\ndeclare module \\"game\\" {\\n  export import BABYLON = BABYLON;\\n\\n  // Forward declaration for the Managers namespace\\n  namespace Managers {}\\n\\n  // We need to declare the Packets namespace so the generated code can reference it.\\n  export * from \\"./packets\\";\\n\\n  export class Entity {\\n    EntityID: number;\\n    EntityType: any; // Could be an enum\\n    Name: string;\\n    Sprite: any; // Placeholder for Sprite class\\n    MapLevel: number;\\n    CurrentGamePosition: BABYLON.Vector3;\\n    CombatLevel: number;\\n    IsDestroyed: boolean;\\n  }\\n\\n  export class Item {\\n    _id: number;\\n    _amount: number;\\n  }\\n\\n  export interface CombatStats {\\n    HitpointsExp: number;\\n    HitpointsCurrLvl: number;\\n    AccuracyExp: number;\\n    AccuracyCurrLvl: number;\\n    StrengthExp: number;\\n    StrengthCurrLvl: number;\\n    DefenseExp: number;\\n    DefenseCurrLvl: number;\\n    MagicExp: number;\\n    MagicCurrLvl: number;\\n    RangeExp: number;\\n    RangeCurrLvl: number;\\n    CombatStyle: any; // Enum\\n    AutoRetaliate: boolean;\\n    CombatLevel: number;\\n  }\\n\\n  export interface SkillStats {\\n    FishingExp: number;\\n    FishingCurrLvl: number;\\n    CookingExp: number;\\n    CookingCurrLvl: number;\\n    ForestryExp: number;\\n    ForestryCurrLvl: number;\\n    MiningExp: number;\\n    MiningCurrLvl: number;\\n    CraftingExp: number;\\n    CraftingCurrLvl: number;\\n    CrimeExp: number;\\n    CrimeCurrLvl: number;\\n    PotionmakingExp: number;\\n    PotionmakingCurrLvl: number;\\n    SmithingExp: number;\\n    SmithingCurrLvl: number;\\n    HarvestingExp: number;\\n    HarvestingCurrLvl: number;\\n    EnchantingExp: number;\\n    EnchantingCurrLvl: number;\\n  }\\n\\n  export interface Appearance {\\n    HairStyleID: number;\\n    BeardStyleID: number;\\n    ShirtID: number;\\n    BodyTypeID: number;\\n    LegsID: number;\\n  }\\n\\n  export class Player extends Entity {\\n    PlayerType: any; // Enum\\n    QuestCheckpoints: any;\\n    PlayerSessionID: string;\\n    ChatToken: string;\\n    MentalClarity: number;\\n    Combat: CombatStats;\\n    Skills: SkillStats;\\n    Inventory: Item[];\\n    EquippedItems: Item[];\\n    Appearance: Appearance;\\n  }\\n  namespace Managers {\\n    /**\\n     * Originally: jM\\n     */\\n    export class UnknownManager_jM {\\n      static readonly Instance: UnknownManager_jM;\\n    }\\n\\n    /**\\n     * Originally: SR\\n     */\\n    export class ObjectUrlManager {\\n      static readonly Instance: ObjectUrlManager;\\n\\n      createObjectURL(e: any): any;\\n      revokeObjectURL(e: any): void;\\n    }\\n\\n    /**\\n     * Originally: zR\\n     */\\n    export class FogManager {\\n      static readonly Instance: FogManager;\\n\\n      initialize(): void;\\n      updatedDrawDistance(e: any, t: any): void;\\n      updateIsFogEnabled(e: any): void;\\n      enterMapLevel(e: any, t: any): void;\\n      loadAfterLogin(e: any, t: any, i: any): void;\\n      unloadAfterLogout(): any;\\n      currentHourChanged(e: any): void;\\n      update(e: any): void;\\n      draw(e: any): void;\\n      reset(): void;\\n    }\\n\\n    /**\\n     * Originally: aD\\n     */\\n    export class WorldEntityManger {\\n      static readonly Instance: WorldEntityManger;\\n\\n      init(): void;\\n      handleMainPlayerMovedUnderOrOutFromRoof(e: any, t: any): void;\\n      checkIfPointIsUnderRoof(e: any): any;\\n      checkIfPositionIsUnderRoof(e: any): any;\\n      checkIfCoordinatesAreUnderRoof(e: any, t: any, i: any): any;\\n      getWorldEntityById(e: any): any;\\n      getWallById(e: any): any;\\n      getBridgeById(e: any): any;\\n      getRoofById(e: any): any;\\n      hasWorldEntity(e: any): any;\\n      hasWall(e: any): any;\\n      hasBridge(e: any): any;\\n      hasRoof(e: any): any;\\n      addWorldEntity(e: any): any;\\n      addWall(e: any): any;\\n      addBridge(e: any): any;\\n      addRoof(e: any): any;\\n      removeWorldEntityById(e: any): any;\\n      removeWallById(e: any): any;\\n      removeBridgeById(e: any): any;\\n      removeRoofById(e: any): any;\\n      addPlanet(e: any): void;\\n      getPlanetByEntityId(e: any): any;\\n      removePlanetByEntityId(e: any): any;\\n      removeEntitiesOutsideOfBorder(e: any, t: any, i: any, n: any): any;\\n      setEntitiesExhaustedResources(e: any, t: any, i: any): void;\\n      setEntityReplenishedResources(e: any): void;\\n      markEntityAsLooted(e: any, t: any): void;\\n      isTargetForSmelting(e: any): any;\\n      handleWalkThroughDoor(e: any, t: any): void;\\n      clearWorldEntities(): void;\\n      clearPlanets(): void;\\n      updateEntities(e: any): void;\\n      drawEntities(e: any, t: any, i: any): void;\\n      reset(): void;\\n    }\\n\\n    /**\\n     * Originally: CN\\n     */\\n    export class GroundItemManager {\\n      static readonly Instance: GroundItemManager;\\n\\n      removeItemsOutsideOfBorder(e: any, t: any, i: any, n: any): any;\\n      clearGroundItems(e?: any): void;\\n      addGroundItem(e: any): void;\\n      getGroundItemByEntityId(e: any): any;\\n      removeItemByEntityId(e: any): void;\\n      drawEntities(e: any, t: any, i: any): void;\\n      reset(): void;\\n    }\\n\\n    /**\\n     * Originally: hF\\n     */\\n    export class CacheManager {\\n      static readonly Instance: CacheManager;\\n\\n      initialize(e: any): void;\\n      showClearGameCachePopupMenu(e: any): any;\\n      addClearGameCacheButtonToScreen(): void;\\n      removeClearGameCacheButtonFromScreen(): void;\\n    }\\n\\n    /**\\n     * Originally: vF\\n     */\\n    export class MeshManager {\\n      static readonly Instance: MeshManager;\\n\\n      getInstanceCountForMeshByFileName(e: any): any;\\n      getObjectByName(e: any, t: any, i: any): any;\\n      removeMeshes(e: any): void;\\n      disposeUnusedMeshes(): void;\\n      garbageCollectOldProjectileMeshes(e: any, t?: any): void;\\n      getArrowMesh(e: any, t: any): any;\\n      getMagicSphere(\\n        e: any,\\n        t: any,\\n        i: any,\\n        n: any,\\n        r: any,\\n        s: any,\\n        a?: any,\\n      ): any;\\n      getMagicCube(\\n        e: any,\\n        t: any,\\n        i: any,\\n        n: any,\\n        r: any,\\n        s: any,\\n        a?: any,\\n      ): any;\\n      getMagicTorus(\\n        e: any,\\n        t: any,\\n        i: any,\\n        n: any,\\n        r: any,\\n        s: any,\\n        a?: any,\\n      ): any;\\n      createBillboardMesh(e: any, t: any, i: any, n: any, r: any, s: any): any;\\n      createSpritesheetMaterial(e: any, t: any): any;\\n      showDebugGridMeshes(): any;\\n      clearDebugGridMeshes(): void;\\n      reset(): void;\\n    }\\n\\n    /**\\n     * Originally: IF\\n     */\\n    export class WorldManager {\\n      static readonly Instance: WorldManager;\\n\\n      InitNumberChunksPerAxis(): void;\\n      getPathfinderGraphStartPoint(): LI;\\n      getPathfinderGraphEndPoint(e: any, t: any): LI;\\n      getInformationForCurrentMapLevel(): any;\\n      loadAsync(e: any, t: any, i: any): any;\\n      loadAfterLogin(e: any, t: any, i: any): void;\\n      unloadAfterLogout(): void;\\n      enterMapLevel(e: any, t: any): void;\\n      currentHourChanged(e: any): void;\\n      update(e: any): void;\\n      draw(e: any): void;\\n      getTileAtGameCoordinates(e: any, t: any): null;\\n      getGroundHeightAtPoint(e: any, t: any, i: any): any;\\n      getGroundHeightAtEntity(e: any): any;\\n      getHeightAtTopOfEntity(e: any): any;\\n      getGroundHeightAtCamera(e: any): any;\\n      isPointInNewChunk(e: any): any;\\n      checkIfNeedToLoadNewMapSections(e: any, t: any): any;\\n      removeDistantEntitiesAfterEnteringNewChunk(e: any, t: any): void;\\n      loadTreasureMapImage(e: any, t: any, i: any): any;\\n      toggleRedPathMesh(e: any): void;\\n      reset(): void;\\n    }\\n\\n    /**\\n     * Originally: hk\\n     */\\n    export class BitmapManager {\\n      static readonly Instance: BitmapManager;\\n\\n      createBitmapFromURL(e: any): any;\\n    }\\n\\n    /**\\n     * Originally: Ck\\n     */\\n    export class AppearanceManager {\\n      static readonly Instance: AppearanceManager;\\n\\n      preInitialize(): any;\\n      initializeNewSession(): void;\\n      updatePlayerAppearance(e: any, t: any): any;\\n      registerEventHandlersForEntity(e: any): void;\\n      unregisterEventHandlersForEntity(e: any): void;\\n      loadHumanSpritesheet(\\n        e: any,\\n        t: any,\\n        i: any,\\n        n: any,\\n        r: any,\\n        s: any,\\n      ): void;\\n      update(e: any): void;\\n      draw(e: any, t: any, i: any): void;\\n      reset(): void;\\n    }\\n\\n    /**\\n     * Originally: Dk\\n     */\\n    export class EntityFactory {\\n      static readonly Instance: EntityFactory;\\n\\n      createMainPlayerFromPacketData(e: any): null;\\n      initializeMainPlayerAppearance(e: any, t: any, i: any): void;\\n      createOtherPlayerFromPacketData(e: any): null;\\n      createNPCFromPacketData(e: any): any;\\n      createWorldEntity(e: any): any;\\n      createBridge(e: any): any;\\n      createGroundItemFromPacketData(e: any): any;\\n      destroyPlayer(e: any): void;\\n      destroyNPC(e: any): void;\\n      destroyWorldEntity(e: any): void;\\n      destroyGroundItemEntity(e: any): void;\\n    }\\n\\n    /**\\n     * Originally: Lk\\n     */\\n    export class EntityManager {\\n      static readonly Instance: EntityManager;\\n\\n      loadAsync(e: any, t: any): any;\\n      init(): void;\\n      addMainPlayer(e: any): null;\\n      addOtherPlayer(e: any): void;\\n      getPlayerByEntityId(e: any): any;\\n      getPlayerByName(e: any): any;\\n      removePlayerByEntityId(e: any): any;\\n      clearOtherPlayers(e?: any): void;\\n      addNPC(e: any): void;\\n      getNPCByEntityId(e: any): any;\\n      isAnyEntityWithEntityTypeIDOnScreen(e: any): any;\\n      removeNPCByEntityId(e: any): any;\\n      clearNPCs(e?: any): void;\\n      teleportEntity(e: any, t: any, i: any, n: any, r: any, s: any): void;\\n      removeEntitiesOutsideOfBorder(e: any, t: any, i: any, n: any): any;\\n      movePlayer(e: any, t: any, i: any): void;\\n      moveNPC(e: any, t: any, i: any): void;\\n      handleMainPlayerMovedInWilderness(e: any, t: any): void;\\n      restoreStatsByOne(e: any): void;\\n      restoreHitpointsForEntity(e: any, t: any): void;\\n      updateEntities(e: any): void;\\n      drawEntities(e: any, t: any, i: any): void;\\n      reset(): void;\\n    }\\n\\n    /**\\n     * Originally: Xk\\n     */\\n    export class SpellManager {\\n      static readonly Instance: SpellManager;\\n\\n      addArrow(e: any, t: any, i?: any, n?: any): any;\\n      addSpell(e: any, t: any, i: any, n: any, r?: any): any;\\n      update(e: any): void;\\n      draw(e: any, t: any, i: any): void;\\n      reset(): void;\\n    }\\n\\n    /**\\n     * Originally: yV\\n     */\\n    export class PacketFactory {\\n      static readonly Instance: PacketFactory;\\n\\n      createGameAction(e: any, t: any): gV;\\n      createGameStateUpdateAction(e: any): gV;\\n      createPlayerMoveToAction(e: any, t: any, i: any): Packets.PlayerMove;\\n      createNPCMoveToAction(e: any, t: any, i: any): any;\\n      createPlayerEnteredChunkAction(\\n        e: any,\\n        t: any,\\n        i: any,\\n        n: any,\\n        r: any,\\n        s: any,\\n        a: any,\\n        o: any,\\n        l: any,\\n        h: any,\\n        c: any,\\n        u: any,\\n        d: any,\\n        p: any,\\n      ): Packets.PlayerEnteredChunk;\\n      createNPCEnteredChunkAction(\\n        e: any,\\n        t: any,\\n        i: any,\\n        n: any,\\n        r: any,\\n        s: any,\\n        a: any,\\n        o: any,\\n      ): Packets.NPCEnteredChunk;\\n      createItemEnteredChunkAction(\\n        e: any,\\n        t: any,\\n        i: any,\\n        n: any,\\n        r: any,\\n        s: any,\\n        a: any,\\n      ): Packets.ItemEnteredChunk;\\n      createEntityExitedChunkAction(e: any, t: any): Packets.EntityExitedChunk;\\n      createInGameHourChangedAction(e: any): any;\\n      createShowDamageAction(e: any, t: any, i: any): Packets.ShowDamage;\\n      createSendMovementPathAction(e: any, t: any): Packets.SendMovementPath;\\n      createObtainedResourceAction(e: any): any;\\n      createPublicMessageAction(e: any, t: any, i: any): Packets.PublicMessage;\\n      createIEnteredChunkAction(e: any, t: any): any;\\n      createEnteredIdleStateAction(e: any, t: any): any;\\n      createLoginAction(e: any, t: any, i: any): Packets.Login;\\n      createLoginFailedAction(e: any): any;\\n      createLoggedInAction(\\n        e: any,\\n        t: any,\\n        i: any,\\n        n: any,\\n        r: any,\\n        s: any,\\n        a: any,\\n        o: any,\\n        l: any,\\n        h: any,\\n        c: any,\\n        u: any,\\n        d: any,\\n        p: any,\\n        f: any,\\n        _: any,\\n        m: any,\\n        g: any,\\n        v: any,\\n        S: any,\\n        C: any,\\n      ): any;\\n      createLogoutAction(e: any): any;\\n      createLogoutFailedAction(e: any): any;\\n      createLoggedOutAction(e: any): any;\\n      createStartedBankingAction(e: any, t: any): any;\\n      createStoppedBankingAction(e: any): any;\\n      createReceivedBankitemsAction(e: any): any;\\n      createTradeRequestedAction(e: any, t: any): any;\\n      createPlayerAcceptedAction(e: any): any;\\n      createTradeStatusResetAction(): gV;\\n      createTradeGoToFinalStepAction(): gV;\\n      createTradeStartedAction(e: any, t: any): any;\\n      createTradeCancelledAction(e: any, t: any, i: any): any;\\n      createTradeCompletedAction(e: any, t: any, i: any): any;\\n      createUseItemOnEntityAction(\\n        e: any,\\n        t: any,\\n        i: any,\\n      ): Packets.UseItemOnEntity;\\n      createCreateItemAction(e: any, t: any, i: any): Packets.CreateItem;\\n      createCreatedItemAction(e: any, t: any, i: any): any;\\n      createStartedTargetingAction(e: any, t: any, i: any, n: any): any;\\n      createStoppedTargetingAction(e: any, t: any): any;\\n      createStartedSkillingAction(e: any, t: any, i: any, n?: any): any;\\n      createStoppedSkillingAction(e: any, t: any, i: any): any;\\n      createEquippedItemAction(e: any, t: any): Packets.EquipItem;\\n      createUnequippedItemAction(e: any, t: any): Packets.UnequipItem;\\n      createPlayerSkillLevelIncreasedAction(\\n        e: any,\\n        t: any,\\n        i: any,\\n        n: any,\\n      ): any;\\n      createPlayerCombatLevelIncreasedAction(e: any, t: any): any;\\n      createCookedItemAction(e: any): any;\\n      createOvercookedItemAction(e: any): any;\\n      createPerformActionOnEntityAction(\\n        e: any,\\n        t: any,\\n        i: any,\\n      ): Packets.PerformActionOnEntity;\\n      createIncreasedCombatExpAction(e: any, t: any): any;\\n      createChangeCombatStyleAction(e: any, t: any): any;\\n      createCombatStyleChangedAction(e: any): any;\\n      createChangeAutoRetaliateAction(e: any): any;\\n      createAutoRetaliateChangedAction(e: any): any;\\n      createTeleportToAction(\\n        e: any,\\n        t: any,\\n        i: any,\\n        n: any,\\n        r: any,\\n        s: any,\\n        a?: any,\\n      ): Packets.TeleportTo;\\n      createPlayerDiedAction(e: any, t?: any): Packets.PlayerDied;\\n      createStartedShoppingAction(e: any, t: any, i: any): any;\\n      createStoppedShoppingAction(e: any, t: any): any;\\n      createUpdatedShopStockAction(e: any, t: any): any;\\n      createStartedChangingAppearanceAction(e: any, t: any): any;\\n      createStoppedChangingAppearanceAction(e: any): any;\\n      createChangeAppearanceAction(e: any, t: any, i: any, n: any, r: any): any;\\n      createChangedAppearanceAction(\\n        e: any,\\n        t: any,\\n        i: any,\\n        n: any,\\n        r: any,\\n        s: any,\\n      ): any;\\n      createMenuStateKeepAlivePingAction(e: any): any;\\n      createToggleSprintAction(e: any): any;\\n      createToggledSprintAction(e: any, t: any, i: any): any;\\n      createRestoredStatsAction(e: any): any;\\n      createEntityExhaustedResourcesAction(e: any, t: any, i?: any): any;\\n      createEntityReplenishedResourcesAction(e: any): any;\\n      createShookTreeAction(e: any, t: any, i: any): any;\\n      createGainedExpAction(e: any, t: any): any;\\n      createShakeTreeResultMessageAction(e?: any, t?: any): any;\\n      createOpenedSkillingMenuAction(e: any, t: any): any;\\n      createUseItemOnItemAction(\\n        e: any,\\n        t: any,\\n        i: any,\\n        n: any,\\n        r: any,\\n        s: any,\\n        a: any,\\n        o: any,\\n        l: any,\\n      ): Packets.UseItemOnItem;\\n      createUsedItemOnItemAction(\\n        e: any,\\n        t: any,\\n        i: any,\\n        n: any,\\n        r: any,\\n        s: any,\\n        a: any,\\n        o: any,\\n        l: any,\\n        h: any,\\n      ): any;\\n      createWentThroughDoorAction(e: any, t: any): any;\\n      createCastTeleportSpellAction(e: any): any;\\n      createCastedTeleportSpellAction(e: any, t: any, i: any): any;\\n      createCastInventorySpellAction(\\n        e: any,\\n        t: any,\\n        i: any,\\n        n: any,\\n        r: any,\\n      ): any;\\n      createCastedInventorySpellAction(e: any, t: any, i: any, n: any): any;\\n      createCastSingleCombatOrStatusSpellAction(e: any, t: any, i: any): any;\\n      createCastedSingleCombatOrStatusSpellAction(\\n        e: any,\\n        t: any,\\n        i: any,\\n        n: any,\\n        r: any,\\n        s: any,\\n        a: any,\\n      ): any;\\n      createToggleAutoCastAction(e: any): any;\\n      createToggledAutoCastAction(e: any): any;\\n      createSkillCurrentLevelChangedAction(e: any, t: any): any;\\n      createServerInfoMessageAction(e: any, t: any): any;\\n      createForcePublicMessageAction(e: any, t: any, i: any): any;\\n      createQuestProgressedAction(e: any, t: any): any;\\n      createCreatedUseItemOnItemActionItemsAction(e: any, t: any, i: any): any;\\n      createPathfindingFailedAction(e: any): any;\\n      createFiredProjectileAction(\\n        e: any,\\n        t: any,\\n        i: any,\\n        n: any,\\n        r: any,\\n        s: any,\\n        a: any,\\n      ): any;\\n      createServerShutdownCountdownAction(e: any): any;\\n      createCanLoginAction(): gV;\\n      createReconnectToServerAction(e: any, t: any): any;\\n      createEntityStunnedAction(e: any, t: any, i: any): any;\\n      createGlobalPublicMessageAction(e: any, t: any, i: any): any;\\n      createHealthRestoredAction(e: any, t: any, i: any): any;\\n      createPlayerCountChangedAction(e: any): any;\\n      createForcedSkillCurrentLevelChangedAction(e: any, t: any, i: any): any;\\n      createReceivedNPCConversationDialogue(\\n        e: any,\\n        t: any,\\n        i: any,\\n        n: any,\\n        r: any,\\n        s: any,\\n      ): any;\\n      createSelectNPCConversationOption(e: any): any;\\n      createEndedNPCConversationAction(e: any): any;\\n      createInvokeInventoryItemActionAction(\\n        e: any,\\n        t: any,\\n        i: any,\\n        n: any,\\n        r: any,\\n        s: any,\\n      ): Packets.InvokeInventoryItemAction;\\n      createInvokedInventoryItemActionAction(\\n        e: any,\\n        t: any,\\n        i: any,\\n        n: any,\\n        r: any,\\n        s: any,\\n        a: any,\\n        o: any,\\n      ): any;\\n      createUsedItemOnEntityAction(\\n        e: any,\\n        t: any,\\n        i: any,\\n        n: any,\\n        r: any,\\n        s: any,\\n      ): any;\\n      createInsertAtBankStorageSlotAction(e: any, t: any): any;\\n      createInsertedAtBankStorageSlotAction(e: any): any;\\n      createRemovedItemAtInventorySlotAction(\\n        e: any,\\n        t: any,\\n        i: any,\\n        n: any,\\n        r: any,\\n        s: any,\\n      ): any;\\n      createAddedItemAtInventorySlotAction(\\n        e: any,\\n        t: any,\\n        i: any,\\n        n: any,\\n        r: any,\\n        s: any,\\n      ): any;\\n      createShowLootMenuAction(e: any, t: any): any;\\n      createReorganizeInventorySlotsAction(\\n        e: any,\\n        t: any,\\n        i: any,\\n        n: any,\\n        r: any,\\n        s: any,\\n        a: any,\\n        o: any,\\n      ): Packets.ReorganizeInventorySlots;\\n      createReorganizedInventorySlotsAction(\\n        e: any,\\n        t: any,\\n        i: any,\\n        n: any,\\n        r: any,\\n        s: any,\\n        a: any,\\n        o: any,\\n        l: any,\\n      ): any;\\n      createSwitchToIdleStateAction(): any;\\n      createUpdateTradeStatusAction(e: any): any;\\n      createStartedDiggingAction(e: any): any;\\n      createStoppedDiggingAction(e: any): any;\\n      createPlayerInfoAction(e: any): any;\\n      createCaptchaActionAction(e: any, t: any): any;\\n      createOpenedCaptchaScreenAction(e: any): any;\\n      createReceivedCaptchaAction(e: any, t: any, i: any): any;\\n      createCaptchaActionResultAction(e: any): any;\\n      createMentalClarityChangedAction(e: any, t: any, i: any): any;\\n    }\\n\\n    /**\\n     * Originally: AV\\n     */\\n    export class PlayerStatsManager {\\n      static readonly Instance: PlayerStatsManager;\\n\\n      loadAsync(e: any, t: any): any;\\n      hasRequiredCurrentLevel(e: any, t: any): any;\\n      increaseExp(e: any, t: any): any;\\n      changeStatsAfterConsumingItem(e: any): void;\\n      forcefullyChangeCurrentLevel(e: any, t: any, i: any): void;\\n      reset(): void;\\n    }\\n\\n    /**\\n     * Originally: qV\\n     */\\n    export class InventoryManager {\\n      static readonly Instance: InventoryManager;\\n\\n      loadAsync(e: any, t: any, i: any): any;\\n      invokeInventoryAction(e: any, t: any, i: any, n: any): any;\\n      emitCreateItemActionPacket(e: any, t: any, i: any): void;\\n      emitUseItemOnItemActionPacket(\\n        e: any,\\n        t: any,\\n        i: any,\\n        n: any,\\n        r: any,\\n        s: any,\\n        a: any,\\n      ): void;\\n      emitInventoryItemActionPacket(\\n        e: any,\\n        t: any,\\n        i: any,\\n        n: any,\\n        r: any,\\n        s: any,\\n      ): void;\\n      emitReorganizeInventorySlotsPacket(\\n        e: any,\\n        t: any,\\n        i: any,\\n        n: any,\\n        r: any,\\n        s: any,\\n        a: any,\\n        o: any,\\n      ): void;\\n      selectItem(e: any, t: any, i: any): any;\\n      unselectItem(): any;\\n      useItemOnEntity(e: any, t: any): void;\\n      handleLookedAtItem(e: any, t: any): void;\\n      reset(): void;\\n    }\\n\\n    /**\\n     * Originally: lG\\n     */\\n    export class QuestManager {\\n      static readonly Instance: QuestManager;\\n\\n      loadAsync(e: any): any;\\n      updateQuestProgress(e: any, t: any): void;\\n      reset(): void;\\n    }\\n\\n    /**\\n     * Originally: uG\\n     */\\n    export class ProjectileManager {\\n      static readonly Instance: ProjectileManager;\\n\\n      handleEntityFiredProjectile(e: any, t: any, i: any, n: any, r: any): void;\\n      reset(): void;\\n    }\\n\\n    /**\\n     * Originally: DG\\n     */\\n    export class ChatFilterManager {\\n      static readonly Instance: ChatFilterManager;\\n\\n      initialize(): void;\\n      filterPublicChatMessage(e: any, t: any, i: any, n: any, r: any): void;\\n      filterPrivateChatMessage(e: any, t: any, i: any, n: any): void;\\n    }\\n\\n    /**\\n     * Originally: FG\\n     */\\n    export class NetworkManager {\\n      static readonly Instance: NetworkManager;\\n\\n      emitPacket(e: any): void;\\n      openSocketConnection(e: any, t: any, i: any): void;\\n    }\\n\\n    /**\\n     * Originally: jG\\n     */\\n    export class SocialManager {\\n      static readonly Instance: SocialManager;\\n\\n      isUserBlocked(e: any): any;\\n      sendPrivateMessage(e: any, t: any): void;\\n      addFriend(e: any): void;\\n      removeFriend(e: any): void;\\n      blockUser(e: any): void;\\n      unblockUser(e: any): void;\\n      openSocketConnection(e: any): any;\\n      reset(): void;\\n    }\\n\\n    /**\\n     * Originally: dW\\n     */\\n    export class SpellActionManager {\\n      static readonly Instance: SpellActionManager;\\n\\n      selectSpell(e: any, t: any): void;\\n      startAutoCastingSpell(e: any): void;\\n      stopAutoCastingSpell(): void;\\n      castTeleportSpell(e: any): void;\\n      castSpellOnItem(e: any, t: any, i: any, n: any, r: any): void;\\n      castSpellOnEntity(e: any, t: any): void;\\n      unselectSpell(): any;\\n      handleEntityCastedTeleportSpell(e: any, t: any, i: any, n?: any): void;\\n      handleEntityCastedInventorySpell(e: any, t: any, i: any): void;\\n      handleEntityCastedStatusSpell(e: any, t: any, i: any, n: any): void;\\n      handleEntityCastedCombatSpell(\\n        e: any,\\n        t: any,\\n        i: any,\\n        n: any,\\n        r: any,\\n      ): void;\\n      reset(): void;\\n    }\\n\\n    /**\\n     * Originally: pW\\n     */\\n    export class GameLoop {\\n      static readonly Instance: GameLoop;\\n\\n      forceEntitiesToRecalculateYPosition(): void;\\n      startGameLoop(e: any): void;\\n      stopGameLoop(): void;\\n      freezeDrawing(): void;\\n      resumeDrawing(): void;\\n    }\\n\\n    /**\\n     * Originally: fW\\n     */\\n    export class InputManager {\\n      static readonly Instance: InputManager;\\n\\n      init(): void;\\n      reset(): void;\\n    }\\n\\n    /**\\n     * Originally: _W\\n     */\\n    export class WildernessManager {\\n      static readonly Instance: WildernessManager;\\n\\n      loadAfterLogin(e: any): void;\\n      handleMainPlayerMovedToNewTile(e: any, t: any): void;\\n      reset(): void;\\n    }\\n\\n    /**\\n     * Originally: gW\\n     */\\n    export class GameEngine {\\n      static readonly Instance: GameEngine;\\n\\n      initEngine(e: any, t: any, i: any): void;\\n      initializeGameEngineAsync(\\n        e: any,\\n        t: any,\\n        i: any,\\n        n: any,\\n        r: any,\\n        s: any,\\n        a: any,\\n        o: any,\\n      ): any;\\n      startGameEngine(e: any): void;\\n      stopGameEngine(): any;\\n      getPickingInfoAtPointer(e: any, t: any): any;\\n      resizeEngine(e: any): void;\\n      clientPointToInGamePoint(e: any, t: any): any;\\n    }\\n\\n    /**\\n     * Originally: oq\\n     */\\n    export class UIManager {\\n      static readonly Instance: UIManager;\\n\\n      isControllerInitialized(): any;\\n      getController(): any;\\n      getCurrentPointerX(): any;\\n      getCurrentPointerY(): any;\\n      getGameContainer(): any;\\n      getCanvas(): any;\\n      getScreenMask(): any;\\n      getContextMenuItemFactory(): any;\\n      getHighSpellInventoryItemFactory(): any;\\n      getChatMenuFactory(): any;\\n      getCenterMenuFactory(): any;\\n      getDialogueMenuFactory(): any;\\n      getEntityOverlayFactory(): any;\\n      getLoginFactory(): any;\\n      getCaptchaScreenFactory(): any;\\n      initializeManager(e: any, t: any, i: any): void;\\n      initializeControls(e: any): void;\\n      setUITheme(e: any): void;\\n      setHasUITransitions(e: any): void;\\n      setHasUITransparency(e: any): void;\\n      setHasUIMenuBlur(e: any): void;\\n      getUseOneMouseButtonMode(): any;\\n      setUseOneMouseButtonMode(e: any): void;\\n      setUIZoom(e: any): void;\\n      updateStyleForMobile(e: any): void;\\n      setOnUIControlPointerDownEventOccurred(e: any): void;\\n      setOnUIControlPointerUpEventOccurred(e: any): void;\\n      showLoadingOverlay(): void;\\n      hideLoadingOverlay(): void;\\n      reset(): void;\\n    }\\n  }\\n\\n  // --- Custom Enums ---\\n  export const enum GameAction {\\n    IsUserBlocked = \\"isUserBlocked\\",\\n    SendPrivateMessage = \\"sendPrivateMessage\\",\\n    AddFriend = \\"addFriend\\",\\n    RemoveFriend = \\"removeFriend\\",\\n    BlockUser = \\"blockUser\\",\\n    UnblockUser = \\"unblockUser\\",\\n    OpenSocketConnection = \\"openSocketConnection\\",\\n    Reset = \\"reset\\",\\n  }\\n}\\n",
  "index.d.ts": "/// <reference path=\\"generated.d.ts\\" />\\n\\n/**\\n * This is the main developer-facing API file for the game extension.\\n * It re-exports the auto-generated types from \`generated.d.ts\` with cleaner names and documentation.\\n * This file should be manually maintained to provide a stable and ergonomic API.\\n */\\n\\nimport * as Generated from \\"./generated\\";\\n\\nexport * from \\"./generated\\";\\nexport * from \\"./mappings\\";\\n\\nexport namespace Core {\\n  // --- Entities ---\\n  export type Entity = Definitions.Entity;\\n  export type Player = Definitions.Player;\\n  export type CombatStats = Definitions.CombatStats;\\n  export type SkillStats = Definitions.SkillStats;\\n  export type Appearance = Definitions.Appearance;\\n\\n  // --- Packets ---\\n  export * from \\"./packets\\";\\n\\n  // --- Enums ---\\n  export * from \\"./enums\\";\\n\\n  // --- Definitions ---\\n  export * from \\"./definitions\\";\\n\\n  // --- Managers ---\\n  export const GameLoop = Generated.Managers.GameLoop.Instance;\\n  export const GameEngine = Generated.Managers.GameEngine.Instance;\\n  export const InputManager = Generated.Managers.InputManager.Instance;\\n  export const WildernessManager =\\n    Generated.Managers.WildernessManager.Instance;\\n  export const EntityManager = Generated.Managers.EntityManager.Instance;\\n  export const SpellManager = Generated.Managers.SpellManager.Instance;\\n  export const WorldManager = Generated.Managers.WorldManager.Instance;\\n\\n  export const SpellActionManager =\\n    Generated.Managers.SpellActionManager.Instance;\\n  export const PacketFactory = Generated.Managers.PacketFactory.Instance;\\n  export const UIManager = Generated.Managers.UIManager.Instance;\\n  export const WorldEntityManger =\\n    Generated.Managers.WorldEntityManger.Instance;\\n  export const GroundItemManager =\\n    Generated.Managers.GroundItemManager.Instance;\\n  export const MeshManager = Generated.Managers.MeshManager.Instance;\\n  export const EntityFactory = Generated.Managers.EntityFactory.Instance;\\n  export const AppearanceManager =\\n    Generated.Managers.AppearanceManager.Instance;\\n  export const InventoryManager = Generated.Managers.InventoryManager.Instance;\\n  export const QuestManager = Generated.Managers.QuestManager.Instance;\\n  export const ProjectileManager =\\n    Generated.Managers.ProjectileManager.Instance;\\n  export const ChatFilterManager =\\n    Generated.Managers.ChatFilterManager.Instance;\\n  export const SocialManager = Generated.Managers.SocialManager.Instance;\\n  export const PlayerStatsManager =\\n    Generated.Managers.PlayerStatsManager.Instance;\\n  export const ObjectUrlManager = Generated.Managers.ObjectUrlManager.Instance;\\n  export const FogManager = Generated.Managers.FogManager.Instance;\\n  export const CacheManager = Generated.Managers.CacheManager.Instance;\\n  export const BitmapManager = Generated.Managers.BitmapManager.Instance;\\n}\\n\\n// It's good practice to export the top-level namespace for easy access.\\nexport default Core;\\n\\n",
  "index.js": "export * from './mappings';",
  "mappings.d.ts": "// Auto-generated by generate-types.js\\nexport declare const friendlyToMinified: Record<string, string>;\\nexport declare const minifiedToFriendly: Record<string, string>;\\n",
  "mappings.js": "// Auto-generated by generate-types.js\\nexport const friendlyToMinified = {\\n    \\"GameLoop\\": \\"pW\\",\\n    \\"GameEngine\\": \\"gW\\",\\n    \\"InputManager\\": \\"fW\\",\\n    \\"WildernessManager\\": \\"_W\\",\\n    \\"EntityManager\\": \\"Lk\\",\\n    \\"SpellManager\\": \\"Xk\\",\\n    \\"WorldManager\\": \\"IF\\",\\n    \\"AtmosphereManager\\": \\"WR\\",\\n    \\"NetworkManager\\": \\"FG\\",\\n    \\"SkillManager\\": \\"PV\\",\\n    \\"TickManager\\": \\"cR\\",\\n    \\"SpellActionManager\\": \\"dW\\",\\n    \\"PacketFactory\\": \\"yV\\",\\n    \\"UIManager\\": \\"oq\\",\\n    \\"WorldEntityManger\\": \\"aD\\",\\n    \\"GroundItemManager\\": \\"CN\\",\\n    \\"MeshManager\\": \\"vF\\",\\n    \\"EntityFactory\\": \\"Dk\\",\\n    \\"AppearanceManager\\": \\"Ck\\",\\n    \\"InventoryManager\\": \\"qV\\",\\n    \\"QuestManager\\": \\"lG\\",\\n    \\"ProjectileManager\\": \\"uG\\",\\n    \\"ChatFilterManager\\": \\"DG\\",\\n    \\"SocialManager\\": \\"jG\\",\\n    \\"PlayerStatsManager\\": \\"AV\\",\\n    \\"ObjectUrlManager\\": \\"SR\\",\\n    \\"FogManager\\": \\"zR\\",\\n    \\"CacheManager\\": \\"hF\\",\\n    \\"BitmapManager\\": \\"hk\\"\\n};\\nexport const minifiedToFriendly = {\\n    \\"pW\\": \\"GameLoop\\",\\n    \\"gW\\": \\"GameEngine\\",\\n    \\"fW\\": \\"InputManager\\",\\n    \\"_W\\": \\"WildernessManager\\",\\n    \\"Lk\\": \\"EntityManager\\",\\n    \\"Xk\\": \\"SpellManager\\",\\n    \\"IF\\": \\"WorldManager\\",\\n    \\"WR\\": \\"AtmosphereManager\\",\\n    \\"FG\\": \\"NetworkManager\\",\\n    \\"PV\\": \\"SkillManager\\",\\n    \\"cR\\": \\"TickManager\\",\\n    \\"dW\\": \\"SpellActionManager\\",\\n    \\"yV\\": \\"PacketFactory\\",\\n    \\"oq\\": \\"UIManager\\",\\n    \\"aD\\": \\"WorldEntityManger\\",\\n    \\"CN\\": \\"GroundItemManager\\",\\n    \\"vF\\": \\"MeshManager\\",\\n    \\"Dk\\": \\"EntityFactory\\",\\n    \\"Ck\\": \\"AppearanceManager\\",\\n    \\"qV\\": \\"InventoryManager\\",\\n    \\"lG\\": \\"QuestManager\\",\\n    \\"uG\\": \\"ProjectileManager\\",\\n    \\"DG\\": \\"ChatFilterManager\\",\\n    \\"jG\\": \\"SocialManager\\",\\n    \\"AV\\": \\"PlayerStatsManager\\",\\n    \\"SR\\": \\"ObjectUrlManager\\",\\n    \\"zR\\": \\"FogManager\\",\\n    \\"hF\\": \\"CacheManager\\",\\n    \\"hk\\": \\"BitmapManager\\"\\n};\\n",
  "packets.d.ts": "/**\\n * This file contains manually-defined interfaces for network packets.\\n */\\nexport namespace Packets {\\n    export interface PublicMessage {\\n        entityId: number;\\n        message: string;\\n        isGlobal: boolean;\\n    }\\n\\n    export interface PlayerMove {\\n        x: number;\\n        y: number;\\n        z: number;\\n    }\\n\\n    export interface Login {\\n        username: string;\\n        password: string;\\n        someFlag: boolean;\\n    }\\n\\n    export interface EquipItem {\\n        itemDefId: number;\\n        inventorySlot: number;\\n    }\\n\\n    export interface UnequipItem {\\n        itemDefId: number;\\n        equipmentSlot: number;\\n    }\\n\\n    export interface ShowDamage {\\n        entityId: number;\\n        damageAmount: number;\\n        damageType: Enums.DamageType; // Enum\\n    }\\n\\n    export interface PlayerDied {\\n        entityId: number;\\n        causeOfDeath: Enums.CauseOfDeath; // Enum\\n    }\\n\\n    export interface PlayerEnteredChunk {\\n        entityId: number;\\n        name: string;\\n        x: number;\\n        y: number;\\n        z: number;\\n        combatLevel: number;\\n        isMale: boolean;\\n        hairStyle: number;\\n        hairColor: number;\\n        skinColor: number;\\n        bodyType: number;\\n        equippedItems: number[];\\n        isSprinting: boolean;\\n        isInCombat: boolean;\\n    }\\n\\n    export interface NPCEnteredChunk {\\n        entityId: number;\\n        npcId: number;\\n        x: number;\\n        y: number;\\n        z: number;\\n        health: number;\\n        maxHealth: number;\\n        isMoving: boolean;\\n    }\\n\\n    export interface ItemEnteredChunk {\\n        entityId: number;\\n        itemId: number;\\n        x: number;\\n        y: number;\\n        z: number;\\n        quantity: number;\\n        isTradeable: boolean;\\n    }\\n\\n    export interface EntityExitedChunk {\\n        entityId: number;\\n        entityType: Enums.EntityType;\\n    }\\n\\n    export interface TeleportTo {\\n        entityId: number;\\n        x: number;\\n        y: number;\\n        z: number;\\n        mapLevel: number;\\n        someBoolean: boolean;\\n        someString: string;\\n    }\\n\\n    export interface PerformActionOnEntity {\\n        targetAction: Enums.TargetAction;\\n        entityType: Enums.EntityType;\\n        entityId: number;\\n    }\\n\\n    export interface UseItemOnEntity {\\n        itemId: number;\\n        entityType: Enums.EntityType;\\n        entityId: number;\\n    }\\n\\n    export interface SendMovementPath {\\n        x: number;\\n        y: number;\\n    }\\n\\n    export interface CreateItem {\\n        itemId: number;\\n        amount: number;\\n        menuType: Enums.MenuType;\\n    }\\n\\n    export interface UseItemOnItem {\\n        menuType: Enums.MenuType;\\n        usingItemSlot: number;\\n        usingItemId: number;\\n        usingItemIsIou: boolean;\\n        targetItemSlot: number;\\n        targetItemId: number;\\n        targetItemIsIou: boolean;\\n        itemOnItemActionResultIndex: number;\\n        amountToCreate: number;\\n    }\\n\\n    export interface InvokeInventoryItemAction {\\n        action: Enums.ItemAction;\\n        menuType: Enums.MenuType;\\n        slot: number;\\n        itemId: number;\\n        amount: number;\\n        isIou: boolean;\\n    }\\n\\n    export interface ReorganizeInventorySlots {\\n        menu: Enums.MenuType;\\n        slot1: number;\\n        itemId1: number;\\n        isIou1: boolean;\\n        slot2: number;\\n        itemId2: number;\\n        isIou2: boolean;\\n        type: Enums.ReorganizeType;\\n    }\\n}\\n"
}"
`;
